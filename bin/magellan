#!/usr/bin/env node
/* eslint no-process-exit: 0, no-console: 0 */

"use strict";

const co = require("co");
const argv = require("marge").argv;

const logger = require("../src/logger");
const cli = require("../src/cli");
const settings = require("../src/settings");
const constants = require("../src/constants");

co(function *() {
  cli.version();

  yield cli.loadFramework({ argv });
  yield cli.loadExecutors({ argv });

  if (argv.help) {
    yield cli.help({ argv });
  }

  const profiles = yield cli.detectProfiles({ argv, settings });
  const executors = yield cli.enableExecutors({ argv, profiles });
  const strategies = yield cli.loadStrategies({ argv });
  const listeners = yield cli.loadListeners({ argv });

  // console.log(profiles)
  // console.log(strategies)
  // console.log(listeners)
  // console.log(executors);

  const tests = yield cli.loadTests({ argv });
  // console.log(tests);

  yield cli.startTestSuite({
    argv,
    tests,
    profiles,
    executors,
    strategies,
    listeners
  });

  // we exit magellan process by providing code directly
  process.exit(0);

}).catch((err) => {

  switch (err.code) {
  case constants.ERROR_CODE.HELP:
      // hacky way to exit after help
    process.exit(0);
    break;

  case constants.ERROR_CODE.TEST_FAILURE:
      // test failure
    process.exit(1);
    break;

  default:
    logger.err(`Error while running Magellan: ${err.message || err}`);
    logger.err(err.stack);
      // we exit magellan process by providing code directly
    process.exit(1);
    break;
  }
});
