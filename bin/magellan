#!/usr/bin/env node

"use strict";
/*eslint-disable no-magic-numbers*/
/*eslint-disable global-require*/

// Note: this script assumes you run this from the same directory as where
// the package.json that contains magellan resides. In addition
// configuration must either be explicitly specified relative to that directory
// or absolutely (or exist implicitly in the default location)

var project = require("../package.json");
console.log("Magellan " + project.version);

var yargs = require("yargs");
var defaultConfigFilePath = "./magellan.json";
var configFilePath = yargs.argv.config;
var margs = require("marge");

// NOTE: marge can throw an error here if --config points at a file that doesn't exist
// FIXME: handle this error nicely instead of printing an ugly stack trace
margs.init(defaultConfigFilePath, configFilePath);

var path = require("path");
var _ = require("lodash");
var TestRunner = require("../src/test_runner");
var getTests = require("../src/get_tests");
var testFilters = require("../src/test_filter");
var WorkerAllocator = require("../src/worker_allocator");
var SauceWorkerAllocator = require("../src/sauce/worker_allocator");
var browserOptions = require("../src/detect_browsers");
var settings = require("../src/settings");
var Q = require("q");
var sauceSettings = require("../src/sauce/settings");
var async = require("async");
var clc = require("cli-color");
var browsers = require("../src/sauce/browsers");
var loadRelativeModule = require("../src/util/load_relative_module");

var isSauce = margs.argv.sauce ? true : false;
var isNodeBased = margs.argv.framework && margs.argv.framework.indexOf("mocha") > -1;

var debug = margs.argv.debug || false;
var useSerialMode = margs.argv.serial;
var MAX_TEST_ATTEMPTS = parseInt(margs.argv.max_test_attempts) || 3;
var selectedBrowsers;
var workerAllocator;
var MAX_WORKERS;

//
// Initialize Framework Plugins
// ============================
//

// We translate old names like "mocha" to the new module names for the
// respective plugins that provide support for those frameworks. Officially,
// moving forward, we should specify our framework (in magellan.json)
var legacyFrameworkNameTranslations = {
  "rowdy-mocha": "testarmada-magellan-mocha-plugin",
  "vanilla-mocha": "testarmada-magellan-mocha-plugin",
  "nightwatch": "testarmada-magellan-nightwatch-plugin"
};

if (legacyFrameworkNameTranslations[settings.framework]) {
  settings.framework = legacyFrameworkNameTranslations[settings.framework];
}

var frameworkLoadException;
try {
  //
  // HELP WANTED: If someone knows how to do this more gracefully, please contribute!
  //
  var frameworkModulePath = "./node_modules/" + settings.framework + "/index";
  settings.testFramework = require(path.resolve(frameworkModulePath));
} catch (e) {
  frameworkLoadException = e;
}

var frameworkInitializationException;
try {
  var pkg = require(path.join(process.cwd(), "package.json"));

  settings.pluginOptions = null;
  if (settings.testFramework.getPluginOptions
    && typeof settings.testFramework.getPluginOptions === "function") {
    // backward support
    settings.pluginOptions
      = settings.testFramework.getPluginOptions(
        {
          rootPackage: pkg,
          rootWorkingDirectory: process.cwd()
        });
  }
  settings.testFramework.initialize(margs.argv, settings.pluginOptions);
} catch (e) {
  frameworkInitializationException = e;
}

// Show help and exit if it's asked for
if (margs.argv.help) {
  var help = require("../src/cli_help");
  help.help();
  process.exit(0); //eslint-disable-line no-process-exit
  return;
}

if (margs.argv.list_browsers) {
  browsers.initialize(true).then(function () {
    if (margs.argv.device_additions) {
      browsers.addDevicesFromFile(margs.argv.device_additions);
    }
    browsers.listBrowsers();
    process.exit(0); //eslint-disable-line no-process-exit
  }).catch(function (err) {
    console.log("Couldn't fetch browsers. Error: ", err);
    console.log(err.stack);
  });
  return;
}

if (!settings.testFramework) {
  console.error(clc.redBright("Error: Could not start Magellan."));
  if (frameworkLoadException) {
    console.error(clc.redBright("Error: Could not load the testing framework plugin '"
      + settings.framework + "'."
      + "\nCheck and make sure your package.json includes a module named '"
      + settings.framework + "'."
      + "\nIf it does not, you can remedy this by typing:"
      + "\n\nnpm install --save " + settings.framework));
    console.log(frameworkLoadException);
  } else if (frameworkInitializationException) {
    console.error(clc.redBright("Error: Could not initialize the testing framework plugin '"
      + settings.framework + "'."
      + "\nThis plugin was found and loaded, but an error occurred during initialization:"));
    console.log(frameworkInitializationException);
  }

  process.exit(1); //eslint-disable-line no-process-exit
}

//
// Initialize Listeners
// ====================
//
// All listener/reporter types are optional and either activated through the existence
// of configuration (i.e environment vars), CLI switches, or magellan.json config.
var listeners = [];

//
// Setup / Teardown
// ================
//
// This is merely a listener like any other reporter, but with a developer-friendly name.

if (margs.argv.setup_teardown) {
  // NOTE: loadRelativeModule can throw an error here if the setup module doesn't exist
  // FIXME: handle this error nicely instead of printing an ugly stack trace
  listeners.push(loadRelativeModule(margs.argv.setup_teardown));
}

//
// Load reporters from magellan.json
// =================================
//
// Reporters that conform to the reporter API and inherit from src/reporter
// can be loaded in magellan.json through a reporters[] list. These can refer to
// either npm modules defined in package.json or to paths relative to the current
// working directory of the calling script or shell.
if (margs.argv.reporters && _.isArray(margs.argv.reporters)) {
  // NOTE: loadRelativeModule can throw an error here if any of the reporter modules don't exist
  // FIXME: handle this error nicely instead of printing an ugly stack trace
  listeners = listeners.concat(margs.argv.reporters.map(loadRelativeModule));
}


//
// Admiral integration (enabled if settings exist)
//
var admiralBuildSettings = require("../src/reporters/admiral/settings");
if (admiralBuildSettings.enabled) {
  var admiral = require("../src/reporters/admiral/reporter");
  admiral.setConfig(admiralBuildSettings);
  /*eslint-disable new-cap*/
  var admiralReporter = new admiral.reporter();
  listeners.push(admiralReporter);
}

//
// Slack integration (enabled if settings exist)
//
var slackSettings = require("../src/reporters/slack/settings");
if (slackSettings.enabled) {
  var Slack = require("../src/reporters/slack/slack");
  var slackReporter = new Slack(slackSettings);
  listeners.push(slackReporter);
}

//
// Serial Mode Reporter (enabled with --serial)
//
if (useSerialMode) {
  var StdoutReporter = require("../src/reporters/stdout/reporter");
  listeners.push(new StdoutReporter());
}

//
// Screenshot Aggregation (enabled with --aggregate_screenshots)
//
if (settings.aggregateScreenshots) {
  var ScreenshotAggregator = require("../src/reporters/screenshot_aggregator/reporter");
  listeners.push(new ScreenshotAggregator());
}


//
// Find Tests, Start Worker Allocator
//
var tests = getTests(testFilters.detectFromCLI(margs.argv));

if (_.isEmpty(tests)) {
  console.log("Error: no tests found");
  process.exit(1);  //eslint-disable-line no-process-exit
}

var initializeListeners = function () {
  var deferred = Q.defer();
  async.each(listeners, function (listener, done) {
    listener.initialize()
      .then(function () {
        done();
      }).catch(function (err) {
        done(err);
      });
  }, function (err) {
    if (err) {
      deferred.reject(err);
    } else {
      deferred.resolve();
    }
  });
  return deferred.promise;
};

var startSuite = function () {
  var deferred = Q.defer();

  workerAllocator.initialize(function (err) {
    if (err) {
      console.error(clc.redBright("Could not start Magellan. Got error while initializing"
        + " worker allocator"));
      deferred.reject(err);
      return;
    }

    var testRunner = new TestRunner(tests, {
      debug: debug,

      maxWorkers: MAX_WORKERS,

      maxTestAttempts: MAX_TEST_ATTEMPTS,

      browsers: selectedBrowsers,

      listeners: listeners,

      bailFast: margs.argv.bail_fast ? true : false,
      bailOnThreshold: margs.argv.bail_early ? true : false,

      serial: useSerialMode,

      allocator: workerAllocator,

      sauceSettings: isSauce ? sauceSettings : undefined,

      onSuccess: function () {
        workerAllocator.teardown(function () {
          deferred.resolve();
        });
      },

      onFailure: function (/*failedTests*/) {
        workerAllocator.teardown(function () {
          // Failed tests are not a failure in Magellan itself, so we pass an empty error
          // here so that we don't confuse the user. Magellan already outputs a failure
          // report to the screen in the case of failed tests.
          deferred.reject(null);
        });
      }
    });

    testRunner.start();

  });

  return deferred.promise;
};

browsers.initialize(isSauce)
  .then(function () {
    if (margs.argv.device_additions) {
      browsers.addDevicesFromFile(margs.argv.device_additions);
    }
  })
  .then(browserOptions.detectFromCLI.bind({}, margs.argv, isSauce, isNodeBased))
  .then(function (_selectedBrowsers) {
    selectedBrowsers = _selectedBrowsers;
    if (_selectedBrowsers.length === 0) {
      console.log(clc.redBright("\nError: To use --sauce mode, you need to specify a browser."
        + "\nTo see a list of sauce browsers, use the --list_browsers option.\n"));
      throw new Error("No browser specified for Sauce support");
    } else if (debug) {
      console.log("Selected browsers: ");
      console.log(_selectedBrowsers.map(function (b) {
        return [
          b.browserId,
          b.resolution ? b.resolution : "(any resolution)",
          b.orientation ? b.orientation : "(any orientation)"
        ].join(" ");
      }).join("\n"));
    }
  })
  .then(function () {
    //
    // Worker Count:
    // =============
    //
    // Non-sauce mode:
    //   Default to 8 workers if we're running phantomjs and *only* phantomjs,
    //                otherwise 3 if other browsers are involved
    //   Default to 1 worker in serial mode.
    //
    // Sauce mode:
    //   Default to 3 workers in parallel mode (default).
    //   Default to 1 worker in serial mode.
    //
    /*eslint-disable no-extra-parens*/
    if (isSauce) {
      MAX_WORKERS = useSerialMode ? 1 : (parseInt(margs.argv.max_workers) || 3);
    } else {
      var DEFAULT_MAX_WORKERS = (selectedBrowsers.length === 1
        && selectedBrowsers[0] === "phantomjs") ? 8 : 3;
      MAX_WORKERS = useSerialMode ? 1 : (parseInt(margs.argv.max_workers) || DEFAULT_MAX_WORKERS);
    }

    if (isSauce) {
      workerAllocator = new SauceWorkerAllocator(MAX_WORKERS);
    } else {
      workerAllocator = new WorkerAllocator(MAX_WORKERS);
    }
  })
  .then(initializeListeners)
  // NOTE: if we don't end up in catch() below, magellan exits with status code 0 naturally
  .then(startSuite)
  .catch(function (err) {
    if (err) {
      console.error(clc.redBright("Error initializing Magellan"));
      console.log(clc.redBright("\nError description:"));
      console.error(err.toString());
      console.log(clc.redBright("\nError stack trace:"));
      console.log(err.stack);
    } else {
      // No err object means we didn't have an internal crash while setting up / tearing down
    }

    // Fail the test suite or fail because of an internal crash
    process.exit(1); //eslint-disable-line no-process-exit
  });
